<?php

namespace App\Tests\Application\UseCase;

use App\Application\DTO\RegistrationData;
use App\Application\UseCase\RegistrationUseCase;
use App\Domain\Entity\User;
use App\Domain\Service\RegistrationService;
use Doctrine\ORM\EntityManagerInterface;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactoryInterface;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class RegistrationUseCaseTest extends TestCase
{
    private EntityManagerInterface $entityManagerMock;
    private LoggerInterface $loggerMock;
    private UserPasswordHasherInterface $userPasswordHasherMock;
    private RegistrationService $registrationService;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->entityManagerMock = $this->createMock(EntityManagerInterface::class);
        $this->loggerMock = $this->createMock(LoggerInterface::class);
        $this->userPasswordHasherMock = $this->createMock(UserPasswordHasherInterface::class);
        $this->registrationService = $this->createMock(RegistrationService::class);
    }

    public function testRegister()
    {
        $registrationData = new RegistrationData();
        $registrationData->firstName = 'Scoo';
        $registrationData->lastName = 'Bidoo';
        $registrationData->userName = 'ScooBidoo';
        $registrationData->email = 'scoo@bi.doo';
        $registrationData->plainPassword = 's@my';

        $registrationUseCase = new RegistrationUseCase($this->registrationService, $this->userPasswordHasherMock, $this->loggerMock);

        $this->userPasswordHasherMock->expects($this->once())->method('hashPassword');
        $this->registrationService->expects($this->once())->method('register');

        $registrationUseCase->register($registrationData);
    }
}